x$setinverse(Inv)
## The assignment is to write a pair of functions that cache the inverse of a matrix.
## This function creates a special "matrix" object that can cache its inverse
# 1 - set the value of the matrix
# 2 - get the value of the matrix
# 3 - set the value of the inverse
# 4 - get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y) {
x <<- y
Inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) Inv <<- inverse
getinverse <- function() Inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function assumes that the underlined matrix is always invertible
cacheSolve <- function(x, ...) {
Inv <- x$getinverse()
if(!is.null(Inv)) {
message("getting cache data.")
return(Inv)
}
data <- x$get()
Inv <- inverse(data)
x$setinverse(Inv)
Inv
## Return a matrix that is the inverse of 'x'
}
x = rbind(c(1, -1/4), c(-1/4, 1))
Inv = makeCacheMatrix(x)
Inv$get()
cacheSolve(Inv)
cacheSolve(x)
cacheSolve(Inv)
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
## The assignment is to write a pair of functions that cache the inverse of a matrix.
## This function creates a special "matrix" object that can cache its inverse
# 1 - set the value of the matrix
# 2 - get the value of the matrix
# 3 - set the value of the inverse
# 4 - get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y) {
x <<- y
Inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) Inv <<- inverse
getinverse <- function() Inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function assumes that the underlined matrix is always invertible
cacheSolve <- function(x, ...) {
Inv <- x$getinverse()
if(!is.null(Inv)) {
message("getting cache data.")
return(Inv)
}
data <- x$get()
Inv <- solve(data)
x$setinverse(Inv)
Inv
## Return a matrix that is the inverse of 'x'
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
